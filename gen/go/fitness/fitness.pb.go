// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: fitness/fitness.proto

package fitness_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProfileResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	UserFirstname     string                 `protobuf:"bytes,1,opt,name=user_firstname,json=userFirstname,proto3" json:"user_firstname,omitempty"`
	UserLastname      string                 `protobuf:"bytes,2,opt,name=user_lastname,json=userLastname,proto3" json:"user_lastname,omitempty"`
	UserMiddlename    *string                `protobuf:"bytes,3,opt,name=user_middlename,json=userMiddlename,proto3,oneof" json:"user_middlename,omitempty"`
	UserBirthday      string                 `protobuf:"bytes,4,opt,name=user_birthday,json=userBirthday,proto3" json:"user_birthday,omitempty"`
	UserHeight        int64                  `protobuf:"varint,5,opt,name=user_height,json=userHeight,proto3" json:"user_height,omitempty"`
	UserWeight        float64                `protobuf:"fixed64,6,opt,name=user_weight,json=userWeight,proto3" json:"user_weight,omitempty"`
	UserFitnessTarget string                 `protobuf:"bytes,7,opt,name=user_fitness_target,json=userFitnessTarget,proto3" json:"user_fitness_target,omitempty"`
	UserSex           bool                   `protobuf:"varint,8,opt,name=user_sex,json=userSex,proto3" json:"user_sex,omitempty"`
	UserHypertain     bool                   `protobuf:"varint,9,opt,name=user_hypertain,json=userHypertain,proto3" json:"user_hypertain,omitempty"`
	UserDiabet        bool                   `protobuf:"varint,10,opt,name=user_diabet,json=userDiabet,proto3" json:"user_diabet,omitempty"`
	UserLevel         *int32                 `protobuf:"varint,11,opt,name=user_level,json=userLevel,proto3,oneof" json:"user_level,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ProfileResponse) Reset() {
	*x = ProfileResponse{}
	mi := &file_fitness_fitness_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileResponse) ProtoMessage() {}

func (x *ProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fitness_fitness_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileResponse.ProtoReflect.Descriptor instead.
func (*ProfileResponse) Descriptor() ([]byte, []int) {
	return file_fitness_fitness_proto_rawDescGZIP(), []int{0}
}

func (x *ProfileResponse) GetUserFirstname() string {
	if x != nil {
		return x.UserFirstname
	}
	return ""
}

func (x *ProfileResponse) GetUserLastname() string {
	if x != nil {
		return x.UserLastname
	}
	return ""
}

func (x *ProfileResponse) GetUserMiddlename() string {
	if x != nil && x.UserMiddlename != nil {
		return *x.UserMiddlename
	}
	return ""
}

func (x *ProfileResponse) GetUserBirthday() string {
	if x != nil {
		return x.UserBirthday
	}
	return ""
}

func (x *ProfileResponse) GetUserHeight() int64 {
	if x != nil {
		return x.UserHeight
	}
	return 0
}

func (x *ProfileResponse) GetUserWeight() float64 {
	if x != nil {
		return x.UserWeight
	}
	return 0
}

func (x *ProfileResponse) GetUserFitnessTarget() string {
	if x != nil {
		return x.UserFitnessTarget
	}
	return ""
}

func (x *ProfileResponse) GetUserSex() bool {
	if x != nil {
		return x.UserSex
	}
	return false
}

func (x *ProfileResponse) GetUserHypertain() bool {
	if x != nil {
		return x.UserHypertain
	}
	return false
}

func (x *ProfileResponse) GetUserDiabet() bool {
	if x != nil {
		return x.UserDiabet
	}
	return false
}

func (x *ProfileResponse) GetUserLevel() int32 {
	if x != nil && x.UserLevel != nil {
		return *x.UserLevel
	}
	return 0
}

type ProfileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProfileRequest) Reset() {
	*x = ProfileRequest{}
	mi := &file_fitness_fitness_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileRequest) ProtoMessage() {}

func (x *ProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fitness_fitness_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileRequest.ProtoReflect.Descriptor instead.
func (*ProfileRequest) Descriptor() ([]byte, []int) {
	return file_fitness_fitness_proto_rawDescGZIP(), []int{1}
}

func (x *ProfileRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type CreateProfileRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	UserFirstname     string                 `protobuf:"bytes,1,opt,name=user_firstname,json=userFirstname,proto3" json:"user_firstname,omitempty"`
	UserLastname      string                 `protobuf:"bytes,2,opt,name=user_lastname,json=userLastname,proto3" json:"user_lastname,omitempty"`
	UserMiddlename    *string                `protobuf:"bytes,3,opt,name=user_middlename,json=userMiddlename,proto3,oneof" json:"user_middlename,omitempty"`
	UserBirthday      string                 `protobuf:"bytes,4,opt,name=user_birthday,json=userBirthday,proto3" json:"user_birthday,omitempty"`
	UserHeight        int64                  `protobuf:"varint,5,opt,name=user_height,json=userHeight,proto3" json:"user_height,omitempty"`
	UserWeight        float64                `protobuf:"fixed64,6,opt,name=user_weight,json=userWeight,proto3" json:"user_weight,omitempty"`
	UserFitnessTarget string                 `protobuf:"bytes,7,opt,name=user_fitness_target,json=userFitnessTarget,proto3" json:"user_fitness_target,omitempty"`
	UserSex           bool                   `protobuf:"varint,8,opt,name=user_sex,json=userSex,proto3" json:"user_sex,omitempty"`
	UserHypertain     bool                   `protobuf:"varint,9,opt,name=user_hypertain,json=userHypertain,proto3" json:"user_hypertain,omitempty"`
	UserDiabet        bool                   `protobuf:"varint,10,opt,name=user_diabet,json=userDiabet,proto3" json:"user_diabet,omitempty"`
	UserLevel         *int32                 `protobuf:"varint,11,opt,name=user_level,json=userLevel,proto3,oneof" json:"user_level,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CreateProfileRequest) Reset() {
	*x = CreateProfileRequest{}
	mi := &file_fitness_fitness_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProfileRequest) ProtoMessage() {}

func (x *CreateProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fitness_fitness_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProfileRequest.ProtoReflect.Descriptor instead.
func (*CreateProfileRequest) Descriptor() ([]byte, []int) {
	return file_fitness_fitness_proto_rawDescGZIP(), []int{2}
}

func (x *CreateProfileRequest) GetUserFirstname() string {
	if x != nil {
		return x.UserFirstname
	}
	return ""
}

func (x *CreateProfileRequest) GetUserLastname() string {
	if x != nil {
		return x.UserLastname
	}
	return ""
}

func (x *CreateProfileRequest) GetUserMiddlename() string {
	if x != nil && x.UserMiddlename != nil {
		return *x.UserMiddlename
	}
	return ""
}

func (x *CreateProfileRequest) GetUserBirthday() string {
	if x != nil {
		return x.UserBirthday
	}
	return ""
}

func (x *CreateProfileRequest) GetUserHeight() int64 {
	if x != nil {
		return x.UserHeight
	}
	return 0
}

func (x *CreateProfileRequest) GetUserWeight() float64 {
	if x != nil {
		return x.UserWeight
	}
	return 0
}

func (x *CreateProfileRequest) GetUserFitnessTarget() string {
	if x != nil {
		return x.UserFitnessTarget
	}
	return ""
}

func (x *CreateProfileRequest) GetUserSex() bool {
	if x != nil {
		return x.UserSex
	}
	return false
}

func (x *CreateProfileRequest) GetUserHypertain() bool {
	if x != nil {
		return x.UserHypertain
	}
	return false
}

func (x *CreateProfileRequest) GetUserDiabet() bool {
	if x != nil {
		return x.UserDiabet
	}
	return false
}

func (x *CreateProfileRequest) GetUserLevel() int32 {
	if x != nil && x.UserLevel != nil {
		return *x.UserLevel
	}
	return 0
}

type UpdateProfileRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	UserId            int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserFirstname     *string                `protobuf:"bytes,2,opt,name=user_firstname,json=userFirstname,proto3,oneof" json:"user_firstname,omitempty"`
	UserLastname      *string                `protobuf:"bytes,3,opt,name=user_lastname,json=userLastname,proto3,oneof" json:"user_lastname,omitempty"`
	UserMiddlename    *string                `protobuf:"bytes,4,opt,name=user_middlename,json=userMiddlename,proto3,oneof" json:"user_middlename,omitempty"`
	UserBirthday      *string                `protobuf:"bytes,5,opt,name=user_birthday,json=userBirthday,proto3,oneof" json:"user_birthday,omitempty"`
	UserHeight        *int64                 `protobuf:"varint,6,opt,name=user_height,json=userHeight,proto3,oneof" json:"user_height,omitempty"`
	UserWeight        *float64               `protobuf:"fixed64,7,opt,name=user_weight,json=userWeight,proto3,oneof" json:"user_weight,omitempty"`
	UserFitnessTarget *string                `protobuf:"bytes,8,opt,name=user_fitness_target,json=userFitnessTarget,proto3,oneof" json:"user_fitness_target,omitempty"`
	UserSex           *bool                  `protobuf:"varint,9,opt,name=user_sex,json=userSex,proto3,oneof" json:"user_sex,omitempty"`
	UserHypertain     *bool                  `protobuf:"varint,10,opt,name=user_hypertain,json=userHypertain,proto3,oneof" json:"user_hypertain,omitempty"`
	UserDiabet        *bool                  `protobuf:"varint,11,opt,name=user_diabet,json=userDiabet,proto3,oneof" json:"user_diabet,omitempty"`
	UserLevel         *int32                 `protobuf:"varint,12,opt,name=user_level,json=userLevel,proto3,oneof" json:"user_level,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpdateProfileRequest) Reset() {
	*x = UpdateProfileRequest{}
	mi := &file_fitness_fitness_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfileRequest) ProtoMessage() {}

func (x *UpdateProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fitness_fitness_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateProfileRequest) Descriptor() ([]byte, []int) {
	return file_fitness_fitness_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateProfileRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateProfileRequest) GetUserFirstname() string {
	if x != nil && x.UserFirstname != nil {
		return *x.UserFirstname
	}
	return ""
}

func (x *UpdateProfileRequest) GetUserLastname() string {
	if x != nil && x.UserLastname != nil {
		return *x.UserLastname
	}
	return ""
}

func (x *UpdateProfileRequest) GetUserMiddlename() string {
	if x != nil && x.UserMiddlename != nil {
		return *x.UserMiddlename
	}
	return ""
}

func (x *UpdateProfileRequest) GetUserBirthday() string {
	if x != nil && x.UserBirthday != nil {
		return *x.UserBirthday
	}
	return ""
}

func (x *UpdateProfileRequest) GetUserHeight() int64 {
	if x != nil && x.UserHeight != nil {
		return *x.UserHeight
	}
	return 0
}

func (x *UpdateProfileRequest) GetUserWeight() float64 {
	if x != nil && x.UserWeight != nil {
		return *x.UserWeight
	}
	return 0
}

func (x *UpdateProfileRequest) GetUserFitnessTarget() string {
	if x != nil && x.UserFitnessTarget != nil {
		return *x.UserFitnessTarget
	}
	return ""
}

func (x *UpdateProfileRequest) GetUserSex() bool {
	if x != nil && x.UserSex != nil {
		return *x.UserSex
	}
	return false
}

func (x *UpdateProfileRequest) GetUserHypertain() bool {
	if x != nil && x.UserHypertain != nil {
		return *x.UserHypertain
	}
	return false
}

func (x *UpdateProfileRequest) GetUserDiabet() bool {
	if x != nil && x.UserDiabet != nil {
		return *x.UserDiabet
	}
	return false
}

func (x *UpdateProfileRequest) GetUserLevel() int32 {
	if x != nil && x.UserLevel != nil {
		return *x.UserLevel
	}
	return 0
}

var File_fitness_fitness_proto protoreflect.FileDescriptor

var file_fitness_fitness_proto_rawDesc = string([]byte{
	0x0a, 0x15, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x2f, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x22, 0xcc, 0x03, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73,
	0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x73, 0x65,
	0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x42, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x69,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x46, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x78,
	0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x61,
	0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x64, 0x69, 0x61, 0x62, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x69, 0x61, 0x62, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22,
	0x29, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd1, 0x03, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65,
	0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64,
	0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x46, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x78,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x78, 0x12,
	0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x61, 0x69,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x48, 0x79, 0x70,
	0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64,
	0x69, 0x61, 0x62, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x44, 0x69, 0x61, 0x62, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xb6,
	0x05, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x46,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x07, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x61, 0x69,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x61, 0x62, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x62, 0x65, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x78, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68,
	0x79, 0x70, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x64, 0x69, 0x61, 0x62, 0x65, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0xde, 0x01, 0x0a, 0x07, 0x46, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x17, 0x2e, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x66, 0x69, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48,
	0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x1d, 0x2e, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x21, 0x5a, 0x1f, 0x4c, 0x69, 0x76, 0x65,
	0x69, 0x73, 0x46, 0x50, 0x56, 0x2e, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x3b, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_fitness_fitness_proto_rawDescOnce sync.Once
	file_fitness_fitness_proto_rawDescData []byte
)

func file_fitness_fitness_proto_rawDescGZIP() []byte {
	file_fitness_fitness_proto_rawDescOnce.Do(func() {
		file_fitness_fitness_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_fitness_fitness_proto_rawDesc), len(file_fitness_fitness_proto_rawDesc)))
	})
	return file_fitness_fitness_proto_rawDescData
}

var file_fitness_fitness_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_fitness_fitness_proto_goTypes = []any{
	(*ProfileResponse)(nil),      // 0: fitness.ProfileResponse
	(*ProfileRequest)(nil),       // 1: fitness.ProfileRequest
	(*CreateProfileRequest)(nil), // 2: fitness.CreateProfileRequest
	(*UpdateProfileRequest)(nil), // 3: fitness.UpdateProfileRequest
}
var file_fitness_fitness_proto_depIdxs = []int32{
	1, // 0: fitness.Fitness.GetProfile:input_type -> fitness.ProfileRequest
	2, // 1: fitness.Fitness.CreateProfile:input_type -> fitness.CreateProfileRequest
	3, // 2: fitness.Fitness.UpdateProfile:input_type -> fitness.UpdateProfileRequest
	0, // 3: fitness.Fitness.GetProfile:output_type -> fitness.ProfileResponse
	0, // 4: fitness.Fitness.CreateProfile:output_type -> fitness.ProfileResponse
	0, // 5: fitness.Fitness.UpdateProfile:output_type -> fitness.ProfileResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_fitness_fitness_proto_init() }
func file_fitness_fitness_proto_init() {
	if File_fitness_fitness_proto != nil {
		return
	}
	file_fitness_fitness_proto_msgTypes[0].OneofWrappers = []any{}
	file_fitness_fitness_proto_msgTypes[2].OneofWrappers = []any{}
	file_fitness_fitness_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_fitness_fitness_proto_rawDesc), len(file_fitness_fitness_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fitness_fitness_proto_goTypes,
		DependencyIndexes: file_fitness_fitness_proto_depIdxs,
		MessageInfos:      file_fitness_fitness_proto_msgTypes,
	}.Build()
	File_fitness_fitness_proto = out.File
	file_fitness_fitness_proto_goTypes = nil
	file_fitness_fitness_proto_depIdxs = nil
}
